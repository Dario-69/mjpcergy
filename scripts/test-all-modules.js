const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: '.env.local' });

// Initialize Firebase Admin
const app = initializeApp({
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  }),
});

const db = getFirestore(app);

async function testAllModules() {
  console.log('üß™ Test de tous les modules de l\'application...\n');

  try {
    // Test 1: V√©rifier la connexion Firebase
    console.log('1Ô∏è‚É£ Test de connexion Firebase...');
    const testRef = db.collection('test');
    await testRef.add({ test: 'connection', timestamp: new Date() });
    console.log('‚úÖ Connexion Firebase OK\n');

    // Test 2: V√©rifier les utilisateurs
    console.log('2Ô∏è‚É£ Test des utilisateurs...');
    const usersSnapshot = await db.collection('users').get();
    console.log(`‚úÖ ${usersSnapshot.docs.length} utilisateur(s) trouv√©(s)`);
    
    // V√©rifier qu'il y a au moins un responsable
    const responsables = usersSnapshot.docs.filter(doc => doc.data().role === 'responsable');
    console.log(`‚úÖ ${responsables.length} responsable(s) trouv√©(s)`);
    
    // V√©rifier qu'il y a au moins un membre
    const membres = usersSnapshot.docs.filter(doc => doc.data().role === 'membre');
    console.log(`‚úÖ ${membres.length} membre(s) trouv√©(s)\n`);

    // Test 3: V√©rifier les d√©partements
    console.log('3Ô∏è‚É£ Test des d√©partements...');
    const departmentsSnapshot = await db.collection('departments').get();
    console.log(`‚úÖ ${departmentsSnapshot.docs.length} d√©partement(s) trouv√©(s)`);
    
    const activeDepartments = departmentsSnapshot.docs.filter(doc => doc.data().isActive);
    console.log(`‚úÖ ${activeDepartments.length} d√©partement(s) actif(s)\n`);

    // Test 4: V√©rifier les formations
    console.log('4Ô∏è‚É£ Test des formations...');
    const formationsSnapshot = await db.collection('formations').get();
    console.log(`‚úÖ ${formationsSnapshot.docs.length} formation(s) trouv√©e(s)`);
    
    const activeFormations = formationsSnapshot.docs.filter(doc => !doc.data().isArchived);
    console.log(`‚úÖ ${activeFormations.length} formation(s) active(s)\n`);

    // Test 5: V√©rifier les √©valuations
    console.log('5Ô∏è‚É£ Test des √©valuations...');
    const evaluationsSnapshot = await db.collection('evaluations').get();
    console.log(`‚úÖ ${evaluationsSnapshot.docs.length} √©valuation(s) trouv√©e(s)\n`);

    // Test 6: V√©rifier les vid√©os
    console.log('6Ô∏è‚É£ Test des vid√©os...');
    const videosSnapshot = await db.collection('videos').get();
    console.log(`‚úÖ ${videosSnapshot.docs.length} vid√©o(s) trouv√©e(s)\n`);

    // Test 7: V√©rifier les r√©sultats d'√©valuations
    console.log('7Ô∏è‚É£ Test des r√©sultats d\'√©valuations...');
    const resultsSnapshot = await db.collection('evaluationResults').get();
    console.log(`‚úÖ ${resultsSnapshot.docs.length} r√©sultat(s) trouv√©(s)\n`);

    // Test 8: V√©rifier les progr√®s utilisateur
    console.log('8Ô∏è‚É£ Test des progr√®s utilisateur...');
    const progressSnapshot = await db.collection('userProgress').get();
    console.log(`‚úÖ ${progressSnapshot.docs.length} progression(s) trouv√©e(s)\n`);

    // Test 9: V√©rifier les relations entre les donn√©es
    console.log('9Ô∏è‚É£ Test des relations entre les donn√©es...');
    
    // V√©rifier que les membres ont des d√©partements
    for (const userDoc of membres) {
      const userData = userDoc.data();
      if (userData.departmentId) {
        const departmentDoc = await db.collection('departments').doc(userData.departmentId).get();
        if (departmentDoc.exists) {
          console.log(`‚úÖ Membre ${userData.name} ‚Üí D√©partement ${departmentDoc.data().name}`);
        } else {
          console.log(`‚ùå Membre ${userData.name} ‚Üí D√©partement introuvable`);
        }
      }
    }

    // V√©rifier que les formations ont des d√©partements
    for (const formationDoc of formationsSnapshot.docs) {
      const formationData = formationDoc.data();
      if (formationData.departmentId) {
        const departmentDoc = await db.collection('departments').doc(formationData.departmentId).get();
        if (departmentDoc.exists) {
          console.log(`‚úÖ Formation ${formationData.title} ‚Üí D√©partement ${departmentDoc.data().name}`);
        } else {
          console.log(`‚ùå Formation ${formationData.title} ‚Üí D√©partement introuvable`);
        }
      }
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìä R√©sum√© des donn√©es :');
    console.log(`- ${usersSnapshot.docs.length} utilisateur(s)`);
    console.log(`- ${departmentsSnapshot.docs.length} d√©partement(s)`);
    console.log(`- ${formationsSnapshot.docs.length} formation(s)`);
    console.log(`- ${evaluationsSnapshot.docs.length} √©valuation(s)`);
    console.log(`- ${videosSnapshot.docs.length} vid√©o(s)`);
    console.log(`- ${resultsSnapshot.docs.length} r√©sultat(s)`);
    console.log(`- ${progressSnapshot.docs.length} progression(s)`);

    console.log('\nüöÄ L\'application est pr√™te √† √™tre utilis√©e !');
    console.log('\nüìã Comptes de test disponibles :');
    console.log('- admin@mjp.com / admin123 (Responsable)');
    console.log('- jean@mjp.com / password123 (Membre - Musique)');
    console.log('- marie@mjp.com / password123 (Membre - Multim√©dia)');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

testAllModules();
