const fetch = require('node-fetch');
require('dotenv').config({ path: '.env.local' });

const BASE_URL = 'http://localhost:3000';

async function testAPIMembersDepartments() {
  console.log('üß™ Test des API membres et d√©partements...\n');

  try {
    // 1. R√©cup√©rer les d√©partements
    console.log('1Ô∏è‚É£ Test GET /api/departements...');
    const departmentsResponse = await fetch(`${BASE_URL}/api/departements`);
    if (departmentsResponse.ok) {
      const departments = await departmentsResponse.json();
      console.log(`‚úÖ ${departments.length} d√©partement(s) r√©cup√©r√©(s)`);
      
      // Afficher les d√©partements avec leurs r√©f√©rents
      departments.forEach(dept => {
        console.log(`   - ${dept.name}: ${dept.referent ? dept.referent.name : 'Sans r√©f√©rent'}`);
      });
      
      // 2. Tester la mise √† jour d'un d√©partement avec r√©f√©rent
      if (departments.length > 0) {
        console.log('\n2Ô∏è‚É£ Test PUT /api/departements/[id] avec r√©f√©rent...');
        
        const department = departments[0];
        const updateResponse = await fetch(`${BASE_URL}/api/departements/${department.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: department.name,
            description: department.description,
            referent: department.referent?.id || null, // Garder le r√©f√©rent actuel ou null
            isActive: department.isActive
          })
        });
        
        if (updateResponse.ok) {
          const updatedDepartment = await updateResponse.json();
          console.log(`‚úÖ D√©partement mis √† jour: ${updatedDepartment.name}`);
          console.log(`   R√©f√©rent: ${updatedDepartment.referent ? updatedDepartment.referent.name : 'Aucun'}`);
        } else {
          console.log(`‚ùå Erreur lors de la mise √† jour: ${updateResponse.status}`);
          const errorText = await updateResponse.text();
          console.log(`   D√©tails: ${errorText}`);
        }
      }
    } else {
      console.log(`‚ùå Erreur GET /api/departements: ${departmentsResponse.status}`);
    }

    // 3. R√©cup√©rer les utilisateurs
    console.log('\n3Ô∏è‚É£ Test GET /api/users...');
    const usersResponse = await fetch(`${BASE_URL}/api/users`);
    if (usersResponse.ok) {
      const users = await usersResponse.json();
      console.log(`‚úÖ ${users.length} utilisateur(s) r√©cup√©r√©(s)`);
      
      // Afficher les utilisateurs avec leurs d√©partements
      users.forEach(user => {
        console.log(`   - ${user.name} (${user.role}): ${user.department ? user.department.name : 'Aucun d√©partement'}`);
      });
      
      // 4. Tester la mise √† jour d'un utilisateur
      const member = users.find(u => u.role === 'membre');
      if (member) {
        console.log('\n4Ô∏è‚É£ Test PUT /api/users/[id]...');
        
        const updateUserResponse = await fetch(`${BASE_URL}/api/users/${member.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: member.name,
            email: member.email,
            departmentId: member.department?.id || null,
            isActive: member.isActive
          })
        });
        
        if (updateUserResponse.ok) {
          const updatedUser = await updateUserResponse.json();
          console.log(`‚úÖ Utilisateur mis √† jour: ${updatedUser.name}`);
          console.log(`   D√©partement: ${updatedUser.department ? updatedUser.department.name : 'Aucun'}`);
        } else {
          console.log(`‚ùå Erreur lors de la mise √† jour: ${updateUserResponse.status}`);
          const errorText = await updateUserResponse.text();
          console.log(`   D√©tails: ${errorText}`);
        }
      }
    } else {
      console.log(`‚ùå Erreur GET /api/users: ${usersResponse.status}`);
    }

    console.log('\nüéâ Tests des API termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.log('\nüí° Assurez-vous que le serveur de d√©veloppement est d√©marr√© (npm run dev)');
  }
}

testAPIMembersDepartments();
