const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');
require('dotenv').config({ path: '.env.local' });

// Initialize Firebase Admin
const app = initializeApp({
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  }),
});

const db = getFirestore(app);

async function testArchiveFirestore() {
  console.log('üß™ Test de l\'archivage avec Firestore...\n');

  try {
    // 1. R√©cup√©rer une formation
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'une formation...');
    const formationsSnapshot = await db.collection('formations').limit(1).get();
    
    if (formationsSnapshot.empty) {
      console.log('‚ùå Aucune formation trouv√©e');
      return;
    }
    
    const formation = formationsSnapshot.docs[0];
    const formationData = formation.data();
    
    console.log(`‚úÖ Formation trouv√©e: ${formationData.title}`);
    console.log(`   Statut actuel: ${formationData.isArchived ? 'Archiv√©e' : 'Active'}`);
    console.log(`   Tags: ${formationData.tags ? formationData.tags.length : 'Aucun'}`);
    console.log(`   Modules: ${formationData.modules ? formationData.modules.length : 'Aucun'}`);
    
    // 2. Tester l'archivage avec donn√©es partielles (simulation de l'API)
    console.log('\n2Ô∏è‚É£ Test d\'archivage avec donn√©es partielles...');
    
    const currentStatus = formationData.isArchived;
    const newStatus = !currentStatus;
    
    console.log(`   Changement vers: ${newStatus ? 'Archiv√©e' : 'Active'}...`);
    
    // Simulation de l'updateData comme dans l'API
    const updateData = {
      title: formationData.title,
      description: formationData.description,
      departmentId: formationData.departmentId,
      modules: formationData.modules,
      tags: formationData.tags,
      estimatedDuration: formationData.estimatedDuration,
      difficulty: formationData.difficulty,
      isArchived: newStatus,
      updatedAt: new Date()
    };
    
    // Filtrer les valeurs undefined (comme dans l'API corrig√©e)
    const filteredUpdateData = Object.fromEntries(
      Object.entries(updateData).filter(([_, value]) => value !== undefined)
    );
    
    console.log(`   Champs √† mettre √† jour: ${Object.keys(filteredUpdateData).join(', ')}`);
    
    await db.collection('formations').doc(formation.id).update(filteredUpdateData);
    console.log('   ‚úÖ Mise √† jour r√©ussie');
    
    // 3. V√©rifier le changement
    console.log('\n3Ô∏è‚É£ V√©rification du changement...');
    const updatedDoc = await db.collection('formations').doc(formation.id).get();
    const updatedData = updatedDoc.data();
    
    console.log(`   Nouveau statut: ${updatedData.isArchived ? 'Archiv√©e' : 'Active'}`);
    
    if (updatedData.isArchived === newStatus) {
      console.log('   ‚úÖ Archivage fonctionne correctement');
    } else {
      console.log('   ‚ùå Probl√®me avec l\'archivage');
    }
    
    // 4. Restaurer le statut original
    console.log('\n4Ô∏è‚É£ Restauration du statut original...');
    const restoreData = {
      isArchived: currentStatus,
      updatedAt: new Date()
    };
    
    await db.collection('formations').doc(formation.id).update(restoreData);
    console.log('   ‚úÖ Statut restaur√©');
    
    console.log('\nüéâ Test d\'archivage Firestore termin√© avec succ√®s !');
    console.log('\nüí° L\'API filtre maintenant les valeurs undefined');
    console.log('   - Aucune erreur Firestore');
    console.log('   - Mises √† jour partielles support√©es');
    console.log('   - Archivage fonctionnel');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testArchiveFirestore();
