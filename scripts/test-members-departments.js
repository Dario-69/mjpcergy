const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');
require('dotenv').config({ path: '.env.local' });

// Initialize Firebase Admin
const app = initializeApp({
  credential: cert({
    projectId: process.env.FIREBASE_PROJECT_ID,
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  }),
});

const db = getFirestore(app);

async function testMembersDepartments() {
  console.log('üß™ Test de la gestion des membres et d√©partements...\n');

  try {
    // 1. V√©rifier les d√©partements existants
    console.log('1Ô∏è‚É£ V√©rification des d√©partements...');
    const departmentsSnapshot = await db.collection('departments').get();
    console.log(`‚úÖ ${departmentsSnapshot.docs.length} d√©partement(s) trouv√©(s)`);
    
    for (const doc of departmentsSnapshot.docs) {
      const data = doc.data();
      console.log(`   - ${data.name}: ${data.referentId ? 'Avec r√©f√©rent' : 'Sans r√©f√©rent'}`);
    }

    // 2. V√©rifier les utilisateurs responsables
    console.log('\n2Ô∏è‚É£ V√©rification des responsables...');
    const responsablesSnapshot = await db.collection('users').where('role', '==', 'responsable').get();
    console.log(`‚úÖ ${responsablesSnapshot.docs.length} responsable(s) trouv√©(s)`);
    
    for (const doc of responsablesSnapshot.docs) {
      const data = doc.data();
      console.log(`   - ${data.name} (${data.email})`);
    }

    // 3. Tester l'assignation d'un r√©f√©rent
    if (departmentsSnapshot.docs.length > 0 && responsablesSnapshot.docs.length > 0) {
      console.log('\n3Ô∏è‚É£ Test d\'assignation de r√©f√©rent...');
      
      const department = departmentsSnapshot.docs[0];
      const responsable = responsablesSnapshot.docs[0];
      
      console.log(`   Assignation de ${responsable.data().name} comme r√©f√©rent de ${department.data().name}...`);
      
      // Mettre √† jour le d√©partement
      await db.collection('departments').doc(department.id).update({
        referentId: responsable.id,
        updatedAt: new Date()
      });
      
      console.log('   ‚úÖ Assignation r√©ussie');
      
      // V√©rifier la mise √† jour
      const updatedDoc = await db.collection('departments').doc(department.id).get();
      const updatedData = updatedDoc.data();
      console.log(`   ‚úÖ V√©rification: r√©f√©rentId = ${updatedData.referentId}`);
    }

    // 4. V√©rifier les membres
    console.log('\n4Ô∏è‚É£ V√©rification des membres...');
    const membersSnapshot = await db.collection('users').where('role', '==', 'membre').get();
    console.log(`‚úÖ ${membersSnapshot.docs.length} membre(s) trouv√©(s)`);
    
    for (const doc of membersSnapshot.docs) {
      const data = doc.data();
      console.log(`   - ${data.name} (${data.email}) - D√©partement: ${data.departmentId || 'Aucun'}`);
    }

    // 5. Tester la mise √† jour d'un membre
    if (membersSnapshot.docs.length > 0 && departmentsSnapshot.docs.length > 0) {
      console.log('\n5Ô∏è‚É£ Test de mise √† jour d\'un membre...');
      
      const member = membersSnapshot.docs[0];
      const department = departmentsSnapshot.docs[0];
      
      console.log(`   Mise √† jour de ${member.data().name} avec le d√©partement ${department.data().name}...`);
      
      // Mettre √† jour le membre
      await db.collection('users').doc(member.id).update({
        departmentId: department.id,
        updatedAt: new Date()
      });
      
      console.log('   ‚úÖ Mise √† jour r√©ussie');
      
      // V√©rifier la mise √† jour
      const updatedMemberDoc = await db.collection('users').doc(member.id).get();
      const updatedMemberData = updatedMemberDoc.data();
      console.log(`   ‚úÖ V√©rification: departmentId = ${updatedMemberData.departmentId}`);
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã R√©sum√© :');
    console.log(`- ${departmentsSnapshot.docs.length} d√©partement(s)`);
    console.log(`- ${responsablesSnapshot.docs.length} responsable(s)`);
    console.log(`- ${membersSnapshot.docs.length} membre(s)`);
    console.log('- Assignation de r√©f√©rents fonctionnelle');
    console.log('- Mise √† jour des membres fonctionnelle');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

testMembersDepartments();
